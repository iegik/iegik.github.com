{
  "version": 3,
  "sources": ["../../../src/components/core/constants.ts", "../../../src/graphql/github/repo_file.graphql", "../../../src/graphql/github/get_user.graphql", "../../../src/services/github-api.ts", "../../../src/services/public-api.ts", "../../../src/components/core/slot-machine.ts", "../../../src/services/log.ts", "../../../src/services/oauth.ts"],
  "sourcesContent": ["export const GITHUB_CLIENT_ID = 'ae0dcffd947e0ca15a12';\nexport const SCOPE = 'user repo';\nexport const ERROR_ACCESS_TOKEN = 'Access token not provided';\nexport const ERROR_NOT_FOUND = 'Page not found';\nexport const ERROR_REQUEST = 'Wrong request';\n", "query RepoFile($repo_owner: String!, $repo_name: String!, $object_path: String!) {\n  repository(owner: $repo_owner, name: $repo_name) {\n    object(expression: $object_path) {\n      ... on Blob {\n        byteSize\n        text\n      }\n    }\n  }\n}\n# {\n#   \"repo_name\": \"iegik.github.com\",\n#   \"repo_owner\": \"iegik\",\n#   \"object_path\": \"gh-pages: data/home.json\"\n# }", "query GetUser($login:String!) {\n  user(login: $login) {\n    avatarUrl\n    login\n  }\n}\n", "\nimport { ERROR_NOT_FOUND, ERROR_REQUEST } from '@app/components/core/constants';\n// @ts-ignore\nimport repoFile from '@app/graphql/github/repo_file.graphql';\n// @ts-ignore\nimport getUserQuery from '@app/graphql/github/get_user.graphql';\n\nconst githubResponseMiddleware = async (res: Response) => {\n  const { data, errors } = await res.json();\n  if (errors) throw errors[0];\n  return data;\n}\n\nclass GitHubApi {\n  static instance = new GitHubApi();\n  repoName: string = 'iegik.github.com';\n  repoOwner: string = 'iegik';\n  storeRoot: string = 'gh-pages:data';\n  private constructor() {}\n  static getInstance() {\n    return this.instance;\n  }\n\n  async request({ query, variables }: Record<string, any>) {\n    if (typeof window === 'undefined') return;\n    const accessToken = window.sessionStorage?.getItem('access_token');\n    const tokenType = window.sessionStorage?.getItem('token_type');\n\n    const res = await fetch('https://api.github.com/graphql', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n        Authorization: `${tokenType} ${accessToken}`,\n      },\n      body: JSON.stringify({\n        query,\n        variables,\n      }),\n    })\n    return githubResponseMiddleware(res)\n  }\n\n  async getFile(path: string) {\n    const data = await this.request({ query: repoFile, variables: {\n      repo_name: this.repoName,\n      repo_owner: this.repoOwner,\n      object_path: `${this.storeRoot}${path}.json`,\n    }})\n    if (!data) throw Error(ERROR_REQUEST);\n    const {\n      repository: { object },\n    } = data;\n    if (!object) throw Error(ERROR_NOT_FOUND);\n    const { text } = object;\n    return JSON.parse(text);\n  };\n\n  async getUserInfo() {\n    const { user } = await this.request({ query: getUserQuery, variables: { login: this.repoOwner }})\n    if (!user) throw Error(ERROR_REQUEST);\n    return user;\n  }\n}\n\nexport default GitHubApi;\n", "import { ERROR_NOT_FOUND } from '@app/components/core/constants';\n\nconst publicResponseMiddleware = (res: Response) => res.json();\n\nclass PublicApi {\n  static instance = new PublicApi();\n  private constructor() {}\n  static getInstance() {\n    return this.instance;\n  }\n\n  async request(uri: string) {\n    const res  = await fetch(`${location.protocol}//${location.host}/data${uri}`, {\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n      },\n    })\n    return publicResponseMiddleware(res)\n  }\n\n  async getFile(path: string) {\n    const data = await this.request(`${path}.json`)\n    if (!data) throw Error(ERROR_NOT_FOUND);\n    return data;\n  };\n}\n\nexport default PublicApi;\n", "import Icon from '@app/components/icon/icon';\nimport { createRef } from '@app/components/core/view';\nimport * as log from '@app/services/log';\n\nlet tries = 0;\nlet blocked = false;\nlet cache = '';\nconst events: (() => void)[] = [];\nconst roll = '\uD83C\uDF4F,\uD83C\uDF30,\uD83C\uDF4B,\uD83C\uDF45,\uD83C\uDF46,\uD83C\uDF47,\uD83C\uDF53,\uD83C\uDF49,\uD83C\uDF50,\uD83C\uDF52,\uD83C\uDF51,\uD83E\uDD51'.split(',');\nconst { floor, random } = Math;\nconst randomRoll = (what: string[]): string =>\n  what[floor(random() * what.length)];\n\nconst Reels: FC<{}> = () => {\n  if (blocked) return cache;\n  const [a, b, c] = /*(tries === 3) ? ['\uD83C\uDF4F', '\uD83C\uDF4F', '\uD83C\uDF4F'] : */ [\n    roll,\n    roll,\n    roll,\n  ].flatMap(randomRoll);\n  cache = `${a} ${b} ${c}`;\n  log.debug(`${tries} ${cache}`);\n\n  if (a == b && b == c) {\n    const msg = `\n            ${cache}\n    You won in ${tries} tries`;\n    blocked = true;\n    events.push(() => {\n      setTimeout(() => {\n        log.info(msg);\n        alert(msg);\n        blocked = false;\n      });\n    });\n    tries = 0;\n  } else {\n    tries++;\n  }\n  return cache;\n};\n\nconst SlotMachine: FC<{}> = () => {\n  const ref = createRef();\n\n  setTimeout(() => {\n    if (typeof window === 'undefined') return;\n\n    // Mount/unmount\n    const observer = new MutationObserver(\n      (mutationList, observer) => {\n        for (const mutation of mutationList) {\n          if (mutation.type === 'childList') {\n            const event = events.pop();\n            if (event) event();\n          }\n        }\n      },\n    );\n    ref.current && observer.observe(ref.current, { childList: true });\n\n    // Click\n    ref.current?.addEventListener('click', () => {\n      if (!ref.current) return;\n      ref.current.innerHTML = Reels();\n    });\n\n    // Keyboard events\n    // keydown for keeping reels spinning\n    document.addEventListener('keydown', (event: KeyboardEvent) => {\n      // bug 354358\n      if (event.isComposing || event.keyCode === 229) {\n        return;\n      }\n\n      // Enter, Space\n      if (event.which !== 13 && event.which !== 32) {\n        return;\n      }\n\n      if (!ref.current) return;\n      ref.current.innerHTML = Reels();\n    });\n  });\n\n  return `\n    <div class=\"slot-machine\">\n      ${Icon({\n        name: 'slot-machine-icon',\n        className: 'slot-machine__icon',\n      })}\n      <span class=\"slot-machine__reels\" ref=\"${ref}\">${Reels()}</span>\n    </div>\n  `;\n};\n\nexport default SlotMachine;\n", "import Error403Page from '@app/pages/error/error-403'\nimport Error404Page from '@app/pages/error/error-404'\nimport Error500Page from '@app/pages/error/error-500'\nimport { ERROR_ACCESS_TOKEN, ERROR_NOT_FOUND } from '@app/components/core/constants';\n\nconst isProd = false\n\n// const message = (...args: any[]): void => {\n//   const { component } = args[0] || {}\n//   const root = document.getElementById('root')\n//   if (root !== null && componentMap[component] !== undefined) {\n//     root.innerHTML = componentMap[component](...args)\n//   };\n//   if (isProd) return;\n//   console[component](...args)\n// }\n\nexport const error = (error: Error) => {\n  // console.error(error)\n  if (typeof window === 'undefined') return;\n\n  // Send logs to Sentry\n  if (isProd && typeof Sentry !== 'undefined') Sentry.captureException(error);\n\n  const root = document.getElementById('root')\n  if (root == null) return;\n  if (error.message === ERROR_NOT_FOUND) {\n    root.innerHTML = Error404Page(error)\n    return;\n  }\n  if (error.message === ERROR_ACCESS_TOKEN) {\n    root.innerHTML = Error403Page(error)\n    return;\n  }\n  // root.innerHTML = Error500Page(error)\n  return;\n}\n\n// eslint-disable-next-line no-console\nexport const debug = isProd ? () => {} : (...args:unknown[]) => { console.debug(...args); }\n// eslint-disable-next-line no-console\nexport const warn = isProd ? () => {} : (...args:unknown[]) => { console.warn(...args); }\n// eslint-disable-next-line no-console\nexport const info = isProd ? () => {} : (...args:unknown[]) => { console.info(...args); }\n// eslint-disable-next-line no-console\nexport const log = isProd ? () => {} : (...args:unknown[]) => { console.log(...args); }\n", "import { GITHUB_CLIENT_ID as clientId } from '@app/components/core/constants'\nimport * as log from '@app/services/log';\nimport { Ref } from '@app/components/core/view';\n\nconst getAccessToken = async (code?:string) => {\n  if (!code) return\n  log.debug('Requesting access_token', { code, clientId })\n  const { access_token: accessToken, scope, token_type: tokenType } = await fetch(`https://qilg4ch66b3vpgtevzccb5meum0ttfcl.lambda-url.eu-north-1.on.aws/?code=${code}&client_id=${clientId}`).then((res) => res.json())\n\n  window.sessionStorage?.setItem('access_token', accessToken)\n  window.sessionStorage?.setItem('scope', scope)\n  window.sessionStorage?.setItem('token_type', tokenType)\n  document.location.href = '/#/profile' // history.pushState({ access_token, scope, token_type }, 'User Info', '/#/profile')\n}\n\nconst OauthService = async (ref: Ref) => {\n  if (typeof document === 'undefined') return;\n  const { protocol, hash, search } = document.location\n  const state = window.sessionStorage?.getItem('state')\n  const code = window.sessionStorage?.getItem('code')\n  log.debug('Checking GET params', { protocol, hash, search, state })\n  const uri = new URLSearchParams(search)\n  if (uri.get('state') !== state) return window.history?.go(-2);\n\n  getAccessToken(uri.get('code') || undefined);\n}\n\nexport default OauthService\n"],
  "mappings": "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",
  "names": ["GITHUB_CLIENT_ID", "ERROR_NOT_FOUND", "ERROR_REQUEST", "repo_file_default", "get_user_default", "githubResponseMiddleware", "res", "data", "errors", "GitHubApi", "_GitHubApi", "query", "variables", "accessToken", "tokenType", "path", "repo_file_default", "ERROR_REQUEST", "object", "ERROR_NOT_FOUND", "text", "user", "get_user_default", "publicResponseMiddleware", "res", "PublicApi", "_PublicApi", "uri", "path", "data", "ERROR_NOT_FOUND", "roll", "floor", "random", "isProd", "debug", "isProd", "args", "getAccessToken", "code", "debug", "GITHUB_CLIENT_ID", "accessToken", "scope", "tokenType", "res", "OauthService", "ref", "protocol", "hash", "search", "state", "uri", "oauth_default"]
}
