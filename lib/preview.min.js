(()=>{var s="Page not found",p="Wrong request";var y=!1;var i=y?()=>{}:(...o)=>{console.info(...o)};var l=()=>{let{protocol:o,hash:e,pathname:t}=document.location;return`${t.replace("index.html","")}${e.slice(2)}`};var w=`query RepoFile($repo_owner: String!, $repo_name: String!, $object_path: String!) {
  repository(owner: $repo_owner, name: $repo_name) {
    object(expression: $object_path) {
      ... on Blob {
        byteSize
        text
      }
    }
  }
}
# {
#   "repo_name": "iegik.github.com",
#   "repo_owner": "iegik",
#   "object_path": "gh-pages: data/home.json"
# }`;var v=`query GetUser($login:String!) {
  user(login: $login) {
    avatarUrl
    login
  }
}
`;var R=async o=>{let{data:e,errors:t}=await o.json();if(t)throw t[0];return e},m=class{constructor(){this.repoName="iegik.github.com";this.repoOwner="iegik";this.storeRoot="gh-pages:data"}static getInstance(){return this.instance}async request({query:e,variables:t}){if(typeof window=="undefined")return;let r=window.sessionStorage?.getItem("access_token"),n=window.sessionStorage?.getItem("token_type"),b=await fetch("https://api.github.com/graphql",{method:"POST",headers:{"Content-Type":"application/json",Accept:"application/json",Authorization:`${n} ${r}`},body:JSON.stringify({query:e,variables:t})});return R(b)}async getFile(e){let t=await this.request({query:w,variables:{repo_name:this.repoName,repo_owner:this.repoOwner,object_path:`${this.storeRoot}${e}.json`}});if(!t)throw Error(p);let{repository:{object:r}}=t;if(!r)throw Error(s);let{text:n}=r;return JSON.parse(n)}async getUserInfo(){let{user:e}=await this.request({query:v,variables:{login:this.repoOwner}});if(!e)throw Error(p);return e}},k=m;k.instance=new m;var L=new Map;var Je="\u{1F34F},\u{1F330},\u{1F34B},\u{1F345},\u{1F346},\u{1F347},\u{1F353},\u{1F349},\u{1F350},\u{1F352},\u{1F351},\u{1F951}".split(",");var c=(o=void 0)=>typeof history=="undefined"?[]:[o||history.state||{},(e,t,r)=>history.pushState({...history.state,...e},t||"")];var I=o=>o.json(),d=class{constructor(){}static getInstance(){return this.instance}async request(e){let t=await fetch(`${location.protocol}//${location.host}/data${e}`,{headers:{"Content-Type":"application/json",Accept:"application/json"}});return I(t)}async getFile(e){let t=await this.request(`${e}.json`);if(!t)throw Error(s);return t}},f=d;f.instance=new d;var $=f;var T=async o=>{let[e={},t]=c();i("PreviewService",{state:e,setUserInfo:t});let r=l(),n=await $.getInstance().getFile(r);i(`File ${r} loaded`,{data:n,state:e}),t(n)},E=T;})();
//# sourceMappingURL=preview.min.js.map
