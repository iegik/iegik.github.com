{
  "version": 3,
  "sources": ["../../../src/components/core/constants.ts", "../../../src/services/log.ts", "../../../src/services/oauth.ts"],
  "sourcesContent": ["export const GITHUB_CLIENT_ID = 'ae0dcffd947e0ca15a12';\nexport const SCOPE = 'user repo';\nexport const ERROR_ACCESS_TOKEN = 'Access token not provided';\nexport const ERROR_NOT_FOUND = 'Page not found';\nexport const ERROR_REQUEST = 'Wrong request';\n", "import { ERROR_ACCESS_TOKEN, ERROR_NOT_FOUND } from '@app/components/core/constants';\n\nconst isProd = process.env.NODE_ENV === 'production';\n\n// const message = (...args: any[]): void => {\n//   const { component } = args[0] || {}\n//   const root = document.getElementById('root')\n//   if (root !== null && componentMap[component] !== undefined) {\n//     root.innerHTML = componentMap[component](...args)\n//   };\n//   if (isProd) return;\n//   console[component](...args)\n// }\n\nexport const error = (error: Error) => {\n  console.error(error)\n  if (typeof window === 'undefined') return;\n\n  // Send logs to Sentry\n  if (isProd && typeof Sentry !== 'undefined') Sentry.captureException(error);\n  // @ts-ignore\n  if (isProd && typeof window.dataLayer !== 'undefined') window.dataLayer.push({\n    'event': 'issue',\n    message: error.message,\n    // @ts-ignore\n    row: error.lineNumber || null,\n    // @ts-ignore\n    source: error.fileName || null,\n    stack: error.stack,\n  });\n\n  if (error.message === ERROR_NOT_FOUND) {\n    window.location.href = \"/404\";\n    return;\n  }\n  if (error.message === ERROR_ACCESS_TOKEN) {\n    window.location.href = \"/403\";\n    return;\n  }\n  // root.innerHTML = Error500Page(error)\n  return;\n}\n\n// eslint-disable-next-line no-console\nexport const debug = isProd ? () => {} : (...args:unknown[]) => { console.debug(...args); }\n// eslint-disable-next-line no-console\nexport const warn = isProd ? () => {} : (...args:unknown[]) => { console.warn(...args); }\n// eslint-disable-next-line no-console\nexport const info = isProd ? () => {} : (...args:unknown[]) => { console.info(...args); }\n// eslint-disable-next-line no-console\nexport const log = isProd ? () => {} : (...args:unknown[]) => { console.log(...args); }\n", "import { GITHUB_CLIENT_ID as clientId } from '@app/components/core/constants'\nimport * as log from '@app/services/log';\nimport { Ref } from '@app/components/core/view';\n\nconst getAccessToken = async (code?:string) => {\n  if (!code) return\n  log.debug('Requesting access_token', { code, clientId })\n  const { access_token: accessToken, scope, token_type: tokenType } = await fetch(`https://qilg4ch66b3vpgtevzccb5meum0ttfcl.lambda-url.eu-north-1.on.aws/?code=${code}&client_id=${clientId}`).then((res) => res.json())\n\n  window.sessionStorage?.setItem('access_token', accessToken)\n  window.sessionStorage?.setItem('scope', scope)\n  window.sessionStorage?.setItem('token_type', tokenType)\n  document.location.href = '/#/profile' // history.pushState({ access_token, scope, token_type }, 'User Info', '/#/profile')\n}\n\nconst OauthService = async (ref: Ref) => {\n  if (typeof document === 'undefined') return;\n  const { protocol, hash, search } = document.location\n  const state = window.sessionStorage?.getItem('state')\n  const code = window.sessionStorage?.getItem('code')\n  log.debug('Checking GET params', { protocol, hash, search, state })\n  const uri = new URLSearchParams(search)\n  if (uri.get('state') !== state) {\n    window.sessionStorage?.removeItem('state')\n    window.history?.go(-2);\n    return;\n  }\n\n  getAccessToken(uri.get('code') || undefined);\n}\n\nexport default OauthService\n"],
  "mappings": "mBAAO,IAAMA,EAAmB,uBCEhC,IAAMC,EAAS,GA0CR,IAAMC,EAAQC,EAAS,IAAM,CAAC,EAAI,IAAIC,IAAmB,CAAE,QAAQ,MAAM,GAAGA,CAAI,CAAG,ECxC1F,IAAMC,EAAiB,MAAOC,GAAiB,CAC7C,GAAI,CAACA,EAAM,OACPC,EAAM,0BAA2B,CAAE,KAAAD,EAAM,SAAAE,CAAS,CAAC,EACvD,GAAM,CAAE,aAAcC,EAAa,MAAAC,EAAO,WAAYC,CAAU,EAAI,MAAM,MAAM,+EAA+EL,CAAI,cAAcE,CAAQ,EAAE,EAAE,KAAMI,GAAQA,EAAI,KAAK,CAAC,EAErN,OAAO,gBAAgB,QAAQ,eAAgBH,CAAW,EAC1D,OAAO,gBAAgB,QAAQ,QAASC,CAAK,EAC7C,OAAO,gBAAgB,QAAQ,aAAcC,CAAS,EACtD,SAAS,SAAS,KAAO,YAC3B,EAEME,EAAe,MAAOC,GAAa,CACvC,GAAI,OAAO,SAAa,IAAa,OACrC,GAAM,CAAE,SAAAC,EAAU,KAAAC,EAAM,OAAAC,CAAO,EAAI,SAAS,SACtCC,EAAQ,OAAO,gBAAgB,QAAQ,OAAO,EAC9CZ,EAAO,OAAO,gBAAgB,QAAQ,MAAM,EAC9CC,EAAM,sBAAuB,CAAE,SAAAQ,EAAU,KAAAC,EAAM,OAAAC,EAAQ,MAAAC,CAAM,CAAC,EAClE,IAAMC,EAAM,IAAI,gBAAgBF,CAAM,EACtC,GAAIE,EAAI,IAAI,OAAO,IAAMD,EAAO,CAC9B,OAAO,gBAAgB,WAAW,OAAO,EACzC,OAAO,SAAS,GAAG,EAAE,EACrB,MACF,CAEAb,EAAec,EAAI,IAAI,MAAM,GAAK,MAAS,CAC7C,EAEOC,EAAQP",
  "names": ["GITHUB_CLIENT_ID", "isProd", "debug", "isProd", "args", "getAccessToken", "code", "debug", "GITHUB_CLIENT_ID", "accessToken", "scope", "tokenType", "res", "OauthService", "ref", "protocol", "hash", "search", "state", "uri", "oauth_default"]
}
