{
  "version": 3,
  "sources": ["../../src/components/core/view.ts", "../../src/components/core/slotmachine.ts", "../../src/components/image/image.ts", "../../src/components/header/header.ts", "../../src/components/icon/icon.ts", "../../src/components/link-list/link-list.ts", "../../src/pages/home/home.ts"],
  "sourcesContent": ["class Ref {\n  toString() {\n    const id = Math.round(Math.random() * 1000000).toString(36);\n    return (this.id = this.id || `ref-${id}`);\n  }\n  get current() {\n    if (!window?.document) return\n    return document.querySelector(`[ref=${this.id}]`);\n  }\n}\n\nexport const createRef = () => new Ref();\n\nexport function useRef() {\n  this.ref = this.ref || new Ref;\n  return this.ref;\n}\n", "import { createRef } from '@app/components/core/view';\n\nlet tries = 0;\nlet blocked = false;\nconst roll = '\uD83C\uDF4F,\uD83C\uDF30,\uD83C\uDF4B,\uD83C\uDF45,\uD83C\uDF46,\uD83C\uDF47,\uD83C\uDF53,\uD83C\uDF49,\uD83C\uDF50,\uD83C\uDF52,\uD83C\uDF51,\uD83E\uDD51'.split(',');\nconst { floor, random } = Math;\nconst randomRoll = (what) => what[floor(random() * what.length)];\n\nconst play = () => {\n  if (blocked) return;\n  const [a, b, c] = [roll, roll, roll].flatMap(randomRoll);\n\n  if (a == b && b == c) {\n    blocked = true;\n    let msg = `You won in ${tries} tries`;\n    setTimeout(() => {\n      alert(msg);\n      blocked = false;\n    }, 100);\n    tries = 0;\n  } else {\n    tries++;\n  }\n  return `${a} ${b} ${c}`;\n}\n\nexport default () => {\n  const ref = createRef();\n\n  setTimeout(() => {\n    ref.current?.addEventListener('click', () => {\n      ref.current.innerHTML = play()\n    });\n    if (!window?.document) return\n    document.addEventListener('keyup', (event) => {\n      // bug 354358\n      if (event.isComposing || event.keyCode === 229) {\n        return;\n      }\n      // Enter, Space\n      if (event.which !== 13 && event.which !== 32) {\n        return;\n      }\n      ref.current.innerHTML = play();\n    });\n  })\n\n  return `<center ref=\"${ref}\">${play()}</center>`;\n}", "const typesMap = {\n  'image/webp': 'webp',\n  'image/jpeg': 'jpg',\n  'image/png': 'png',\n}\n\nconst Sources = ({ types, sizes, src }) => Object.entries(typesMap)\n  .filter(([ext]) => types.includes(ext))\n  .flatMap(([type, ext]) => `\n    <source type=\"${type}\" srcset=\"${sizes.split(',').map((w) => src.replace(new RegExp(`.(${types})$`), `_${w}.${ext} ${w}w`))}\" />\n  `)\n  .join('')\n\nconst Image = (props) => {\n  const { src, ratio, sizes, types = 'png|webp', loading, alt = '', itemprop, className  } = props;\n  const [width, height] = ratio.split(':')\n\n  return `\n    <picture class=\"${className}\">\n      ${Sources({ types, sizes, src })}\n      <img src=\"${src}\" width=\"${width}\" height=\"${height}\" loading=\"${loading}\" alt=\"${alt}\" itemprop=\"${itemprop}\" />\n    </picture>\n  `\n}\n\nexport default Image\n", "import Image from '@app/components/image/image'\nimport ascii from '@assets/home/images/artursjansons.ascii'\n\nconst Header = () => `\n    <header class=\"header\">\n      <a href=\"#home\" class=\"header__avatar\" alt=\"avatar\">${Image({ itemprop: \"photo\", src: `home/images/artursjansons.jpg`, ratio: \"1:1\", sizes: \"255,216,64\", types: 'jpg|png|webp', alt: ascii })}</a>\n    </header>\n  `\nexport default Header", "const Icon = ({ id, className, name }) => `\n    <svg id=\"${id}\" class=\"${className}\" preserveAspectRatio=\"xMidYMid meet\">\n      <use xlink:href=\"#sprite-${name}\" />\n    </svg>\n  `\nexport default Icon\n", "const LinkList = (props): string => {\n  const { className, children, squire } = props\n  let classList = `link-list`\n  if (className) classList += ` ${className}`\n  if (squire) classList += ' link-list--squire'\n\n  return `\n      <div class=\"${classList}\">\n        ${children?.map((link) => `<div class=\"link-list__item\">${link}</div>`).join('')}\n      </div>\n    `\n}\n\nexport default LinkList\n", "// import '@app/lib/ga';\n// import '@app/lib/clouds';\n\nimport slotmachine from '@app/components/core/slotmachine'\nimport Header from '@app/components/header/header'\nimport Icon from '@app/components/icon/icon'\nimport LinkList from '@app/components/link-list/link-list'\n\nconst Home = () => `\n    ${Header()}\n    <article lang=\"en\">\n      <section id=\"home\" itemscope itemtype=\"http://schema.org/Person\">\n        <header>\n          <h2 itemprop=\"name\" class=\"h2\"><span itemprop=\"givenName\">Art\u016Brs</span> <span itemprop=\"familyName\">Jansons</span></h2>\n          <span itemprop=\"jobTitle\" class=\"subtitle\">Full-stack web developer</span>\n            <br>\n            <span itemprop=\"address\" itemscope itemtype=\"http://schema.org/PostalAddress\"><span itemprop=\"addressLocality\">St. Petersburg</span>,</span>\n            <a href=\"callto:0079213900737\"><i class=\"fa fa-whatsapp\"></i><span itemprop=\"telephone\">+7-921-390-07-37</span></a>\n            <a href=\"mailto:a.jansons+github@gmail.com?title=iegik.github.io:contact\" itemprop=\"email\">a.jansons@gmail.com</a>\n          ${LinkList({\n    squire: true,\n    children: [\n      `<a class=\"link-list__link\" href=\"http://linkedin.com/in/iegik\" title=\"LinkedIn\">${Icon({ name: \"linkedin-icon\", className: 'link-list__icon' })}</a>`,\n      `<a class=\"link-list__link\" href=\"http://github.com/iegik\" title=\"GitHub\">${Icon({ name: \"github-icon\", className: 'link-list__icon' })}</a>`,\n      `<a class=\"link-list__link\" href=\"http://jsfiddle.net/user/iegik\" title=\"JSFiddle\">${Icon({ name: \"jsfiddle-icon\", className: 'link-list__icon' })}</a>`,\n      `<a class=\"link-list__link\" href=\"http://stackoverflow.com/users/771471/iegik\" title=\"Stack Overflow\">${Icon({ name: \"stackoverflow-icon\", className: 'link-list__icon' })}</a>`,\n    ],\n  })}\n          <div class=\"network\">\n          </div>\n        </header>\n      </section>\n    </article>\n    <footer>\n      ${slotmachine()}\n    </footer>\n  `\nif (window?.document) {\n  document.getElementById('root').innerHTML = Home()\n}\n\nexport default Home\n"],
  "mappings": "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",
  "names": []
}
