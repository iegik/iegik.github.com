{
  "version": 3,
  "sources": ["../../../src/components/core/constants.ts", "../../../src/services/log.ts", "../../../src/services/oauth.ts", "../../../src/services/web-utils.ts", "../../../src/components/core/slot-machine.ts", "../../../src/components/core/view.ts", "../../../src/graphql/github/repo_file.graphql", "../../../src/graphql/github/get_user.graphql", "../../../src/services/github-api.ts", "../../../src/services/editor.ts", "../../../src/services/public-api.ts", "../../../src/services/preview.ts", "../../../src/services/user-info.ts", "../../../src/services/index.ts"],
  "sourcesContent": ["export const GITHUB_CLIENT_ID = 'ae0dcffd947e0ca15a12';\nexport const SCOPE = 'user repo';\nexport const ERROR_ACCESS_TOKEN = 'Access token not provided';\nexport const ERROR_NOT_FOUND = 'Page not found';\nexport const ERROR_REQUEST = 'Wrong request';\n", "import { ERROR_ACCESS_TOKEN, ERROR_NOT_FOUND } from '@app/components/core/constants';\n\nconst isProd = false\n\n// const message = (...args: any[]): void => {\n//   const { component } = args[0] || {}\n//   const root = document.getElementById('root')\n//   if (root !== null && componentMap[component] !== undefined) {\n//     root.innerHTML = componentMap[component](...args)\n//   };\n//   if (isProd) return;\n//   console[component](...args)\n// }\n\nexport const error = (error: Error) => {\n  // console.error(error)\n  if (typeof window === 'undefined') return;\n\n  // Send logs to Sentry\n  if (isProd && typeof Sentry !== 'undefined') Sentry.captureException(error);\n  // @ts-ignore\n  if (isProd && typeof window.dataLayer !== 'undefined') window.dataLayer.push({\n    'event': 'issue',\n    message: error.message,\n    // @ts-ignore\n    row: error.lineNumber || null,\n    // @ts-ignore\n    source: error.fileName || null,\n    stack: error.stack,\n  });\n\n  if (error.message === ERROR_NOT_FOUND) {\n    window.location.href = \"/404\";\n    return;\n  }\n  if (error.message === ERROR_ACCESS_TOKEN) {\n    window.location.href = \"/403\";\n    return;\n  }\n  // root.innerHTML = Error500Page(error)\n  return;\n}\n\n// eslint-disable-next-line no-console\nexport const debug = isProd ? () => {} : (...args:unknown[]) => { console.debug(...args); }\n// eslint-disable-next-line no-console\nexport const warn = isProd ? () => {} : (...args:unknown[]) => { console.warn(...args); }\n// eslint-disable-next-line no-console\nexport const info = isProd ? () => {} : (...args:unknown[]) => { console.info(...args); }\n// eslint-disable-next-line no-console\nexport const log = isProd ? () => {} : (...args:unknown[]) => { console.log(...args); }\n", "import { GITHUB_CLIENT_ID as clientId } from '@app/components/core/constants'\nimport * as log from '@app/services/log';\nimport { Ref } from '@app/components/core/view';\n\nconst getAccessToken = async (code?:string) => {\n  if (!code) return\n  log.debug('Requesting access_token', { code, clientId })\n  const { access_token: accessToken, scope, token_type: tokenType } = await fetch(`https://qilg4ch66b3vpgtevzccb5meum0ttfcl.lambda-url.eu-north-1.on.aws/?code=${code}&client_id=${clientId}`).then((res) => res.json())\n\n  window.sessionStorage?.setItem('access_token', accessToken)\n  window.sessionStorage?.setItem('scope', scope)\n  window.sessionStorage?.setItem('token_type', tokenType)\n  document.location.href = '/#/profile' // history.pushState({ access_token, scope, token_type }, 'User Info', '/#/profile')\n}\n\nconst OauthService = async (ref: Ref) => {\n  if (typeof document === 'undefined') return;\n  const { protocol, hash, search } = document.location\n  const state = window.sessionStorage?.getItem('state')\n  const code = window.sessionStorage?.getItem('code')\n  log.debug('Checking GET params', { protocol, hash, search, state })\n  const uri = new URLSearchParams(search)\n  if (uri.get('state') !== state) {\n    window.sessionStorage?.removeItem('state')\n    window.history?.go(-2);\n    return;\n  }\n\n  getAccessToken(uri.get('code') || undefined);\n}\n\nexport default OauthService\n", "export const getRoute = () => {\n  const { protocol, hash, pathname } = document.location\n  const path = `${pathname.replace('index.html', '')}${hash.slice(2)}` // /path1#/path2\n  return path\n}\n\nexport const escapeHTML = (unsafe: string) => unsafe.replace(/[&<\"']/g, (m) => {\n  switch (m) {\n    case '&':\n      return '&amp;';\n    case '<':\n      return '&lt;';\n    case '\"':\n      return '&quot;';\n    default:\n      return '&#039;';\n  }\n});", "import Icon from '@app/components/icon/icon';\nimport { createRef } from '@app/components/core/view';\nimport * as log from '@app/services/log';\n\nlet tries = 0;\nlet blocked = false;\nlet cache = '';\nconst events: (() => void)[] = [];\nconst roll = '\uD83C\uDF4F,\uD83C\uDF30,\uD83C\uDF4B,\uD83C\uDF45,\uD83C\uDF46,\uD83C\uDF47,\uD83C\uDF53,\uD83C\uDF49,\uD83C\uDF50,\uD83C\uDF52,\uD83C\uDF51,\uD83E\uDD51'.split(',');\nconst { floor, random } = Math;\nconst randomRoll = (what: string[]): string =>\n  what[floor(random() * what.length)];\n\nconst Reels: FC<{}> = () => {\n  if (blocked) return cache;\n  const [a, b, c] = /*(tries === 3) ? ['\uD83C\uDF4F', '\uD83C\uDF4F', '\uD83C\uDF4F'] : */ [\n    roll,\n    roll,\n    roll,\n  ].flatMap(randomRoll);\n  cache = `${a} ${b} ${c}`;\n  log.debug(`${tries} ${cache}`);\n\n  if (a == b && b == c) {\n    const msg = `\n            ${cache}\n    You won in ${tries} tries`;\n    blocked = true;\n    events.push(() => {\n      setTimeout(() => {\n        log.info(msg);\n        alert(msg);\n        blocked = false;\n      });\n    });\n    tries = 0;\n  } else {\n    tries++;\n  }\n  return cache;\n};\n\nconst SlotMachine: FC<{}> = () => {\n  const ref = createRef();\n\n  setTimeout(() => {\n    if (typeof window === 'undefined') return;\n\n    // Mount/unmount\n    const observer = new MutationObserver(\n      (mutationList, observer) => {\n        for (const mutation of mutationList) {\n          if (mutation.type === 'childList') {\n            const event = events.pop();\n            if (event) event();\n          }\n        }\n      },\n    );\n    ref.current && observer.observe(ref.current, { childList: true });\n\n    // Click\n    ref.current?.addEventListener('click', () => {\n      if (!ref.current) return;\n      ref.current.innerHTML = Reels();\n    });\n\n    // Keyboard events\n    // keydown for keeping reels spinning\n    document.addEventListener('keydown', (event: KeyboardEvent) => {\n      // bug 354358\n      if (event.isComposing || event.keyCode === 229) {\n        return;\n      }\n\n      // Enter, Space\n      if (event.which !== 13 && event.which !== 32) {\n        return;\n      }\n\n      if (!ref.current) return;\n      ref.current.innerHTML = Reels();\n    });\n  });\n\n  return `\n    <div class=\"slot-machine\">\n      ${Icon({\n        name: 'slot-machine-icon',\n        className: 'slot-machine__icon',\n      })}\n      <span class=\"slot-machine__reels\" ref=\"${ref}\">${Reels()}</span>\n    </div>\n  `;\n};\n\nexport default SlotMachine;\n", "// deno-lint-ignore-file no-undef\n// global document, navigation\nimport * as log from '@app/services/log';\nimport { escapeHTML } from '@app/services/web-utils';\nimport * as componentsMap from '@app/components/index';\n\nexport class Ref {\n  id: string | null = null;\n  toString() {\n    const id = btoa(\n      `${Math.ceil(Math.random() * 1e13) + +new Date()}`,\n    ).slice(10, 18);\n    return (this.id = this.id || `ref-${id}`);\n  }\n  // @ts-ignore\n  get current() {\n    if (\n      typeof window === 'undefined' ||\n      typeof document === 'undefined'\n    )\n      return null;\n    return <HTMLInputElement>(\n      document.querySelector(`[ref=${this.id}]`)\n    );\n  }\n}\n\nexport const createRef = () => new Ref();\n\nexport interface State extends ViewProps {\n  title?: string;\n  url?: string;\n}\n\nexport const useState = (initialState = undefined) =>\n  typeof history === 'undefined'\n    ? []\n    : [\n        initialState || history.state || {},\n        (state: State, title: string, url: string) =>\n          history.pushState(\n            { ...history.state, ...state },\n            title || '',\n            url || location.href,\n          ),\n      ];\n\nconst mutationConfig = {\n  attributes: true,\n  childList: true,\n  subtree: true,\n};\n\nconst render =\n  (\n    ref: Ref,\n    eventType: string,\n    props: State = { component: 'View' },\n  ) =>\n  (event: MutationRecord[] | MutationRecord | Error) => {\n    const [state, setState] = useState();\n    const { component = 'View' } = props;\n    log.debug('render', {\n      eventType,\n      component,\n      state,\n      props,\n      event,\n      typeof: typeof event,\n      isArray: Array.isArray(event),\n    });\n    if (event instanceof Error) {\n      log.error(event);\n      return;\n    }\n\n    const Component =\n      componentsMap[\n        (component || 'View') as keyof typeof componentsMap\n      ];\n    if (Array.isArray(event)) {\n      for (const mutation of event)\n        render(ref, eventType, props)(mutation);\n      return;\n    }\n\n    if (\n      event instanceof MutationRecord &&\n      event.type === 'childList'\n    ) {\n      let refs = [];\n      // for (let item of event.target) {\n      //   if (item instanceof HTMLElement) refs.push(item.getAttribute('ref'))\n      // }\n      log.log('A child node has been added or removed.', {\n        target: event.target,\n      });\n      return;\n    }\n    if (\n      event instanceof MutationRecord &&\n      event.type === 'attributes'\n    ) {\n      log.log(`The ${event.attributeName} attribute was modified.`, {\n        event,\n      });\n      if (ref.current) ref.current.innerHTML = Component(state);\n      return;\n    }\n    // options: { subtree: true } must be enabled on MutationObserver\n    // if (event instanceof MutationRecord && event.type === 'subtree') {\n    //   log.log(`The children was modified.`, { event });\n    //   return;\n    // }\n\n    if (!Component) throw Error(`Component ${component} not found`);\n    // FIXME: Fix this\n    // if (!history.state) throw Error(ERROR_NOT_FOUND)\n    if (ref?.current) ref.current.innerHTML = Component(state);\n  };\n\nconst attachEvents = async (ref: Ref, props: State) => {\n  log.debug('attachEvents', { ref, props });\n\n  // To observe DOM changes\n  const observer = new MutationObserver(render(ref, 'render', props));\n  ref.current && observer.observe(ref.current, mutationConfig);\n\n  // addEventListener('popstate', render(ref, 'popstate'));\n  // @ts-ignore\n  navigation?.addEventListener(\n    'navigate',\n    render(ref, 'navigate', props),\n  );\n\n  // TODO: Move here from main()\n  // document.addEventListener('error', render(ref, 'error', props))\n\n  // Cleanup on unmount\n  ref?.current?.addEventListener('DOMRemoved', () => {\n    if (!globalThis.hasOwnProperty('navigation')) return;\n    log.info('DOMRemoved');\n    // removeEventListener('popstate', popstate);\n    // @ts-ignore\n    navigation?.removeEventListener(\n      'navigate',\n      render(ref, 'navigate', props),\n    );\n    observer.disconnect();\n  });\n};\n\nconst runServices = async (ref: Ref, props: State) => {\n  log.debug('runServices', { ref, props });\n  const { services } = props;\n  const [state, setState] = useState();\n\n  if (!services) return;\n  for (const serviceName of services) {\n    // @ts-ignore\n    const service = window.servicesMap?.[serviceName];\n    if (!service) throw Error(`Service ${serviceName} not found`);\n    await service(ref);\n  }\n\n  // Keep history\n  setState({ services: null });\n};\n\nconst View: FC<ViewProps> = (props = {}) => {\n  log.debug({ props });\n  const {\n    tag = 'div',\n    className = '',\n    children = [],\n    services = [],\n    component = 'View',\n    ...rest\n  } = props;\n  const ref = createRef();\n  const [state, setState] = useState();\n\n  setTimeout(async () => {\n    if (!ref.current) return;\n    if (services?.length) attachEvents(ref, props);\n    if (services?.length) runServices(ref, props);\n  });\n\n  // TODO: Replace with imperative\n  const content = Array.isArray(children)\n    ? children\n        .map((childProps: ReactNode) =>\n          childProps instanceof Object\n            ? View(<ViewProps>childProps ?? {})\n            : `${childProps}`,\n        )\n        .join?.('')\n    : escapeHTML(`${children}`);\n\n  const restProps = Object.entries(rest)?.reduce?.(\n    (acc, [key, value = '']) => `${acc} ${key}=\"${value}\"`,\n    '',\n  );\n\n  log.debug('Rendering', { content, restProps });\n\n  return `\n    <${tag} class=\"${className}\" ref=\"${ref}\" ${restProps}>\n      ${content}\n    </${tag}>\n  `;\n};\n\nexport default View;\n", "query RepoFile($repo_owner: String!, $repo_name: String!, $object_path: String!) {\n  repository(owner: $repo_owner, name: $repo_name) {\n    object(expression: $object_path) {\n      ... on Blob {\n        byteSize\n        text\n      }\n    }\n  }\n}\n# {\n#   \"repo_name\": \"iegik.github.com\",\n#   \"repo_owner\": \"iegik\",\n#   \"object_path\": \"gh-pages: data/home.json\"\n# }", "query GetUser($login:String!) {\n  user(login: $login) {\n    avatarUrl\n    login\n  }\n}\n", "\nimport { ERROR_NOT_FOUND, ERROR_REQUEST } from '@app/components/core/constants';\n// @ts-ignore\nimport repoFile from '@app/graphql/github/repo_file.graphql';\n// @ts-ignore\nimport getUserQuery from '@app/graphql/github/get_user.graphql';\n\nconst githubResponseMiddleware = async (res: Response) => {\n  const { data, errors } = await res.json();\n  if (errors) throw errors[0];\n  return data;\n}\n\nclass GitHubApi {\n  static instance = new GitHubApi();\n  repoName: string = 'iegik.github.com';\n  repoOwner: string = 'iegik';\n  storeRoot: string = 'gh-pages:data';\n  private constructor() {}\n  static getInstance() {\n    return this.instance;\n  }\n\n  async request({ query, variables }: Record<string, any>) {\n    if (typeof window === 'undefined') return;\n    const accessToken = window.sessionStorage?.getItem('access_token');\n    const tokenType = window.sessionStorage?.getItem('token_type');\n\n    const res = await fetch('https://api.github.com/graphql', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n        Authorization: `${tokenType} ${accessToken}`,\n      },\n      body: JSON.stringify({\n        query,\n        variables,\n      }),\n    })\n    return githubResponseMiddleware(res)\n  }\n\n  async getFile(path: string) {\n    const data = await this.request({ query: repoFile, variables: {\n      repo_name: this.repoName,\n      repo_owner: this.repoOwner,\n      object_path: `${this.storeRoot}${path}.json`,\n    }})\n    if (!data) throw Error(ERROR_REQUEST);\n    const {\n      repository: { object },\n    } = data;\n    if (!object) throw Error(ERROR_NOT_FOUND);\n    const { text } = object;\n    return JSON.parse(text);\n  };\n\n  async getUserInfo() {\n    const { user } = await this.request({ query: getUserQuery, variables: { login: this.repoOwner }})\n    if (!user) throw Error(ERROR_REQUEST);\n    return user;\n  }\n}\n\nexport default GitHubApi;\n", "import { Ref } from '@app/components/core/view';\nimport { useState } from '@app/components/core/view';\nimport { getRoute } from '@app/services/web-utils';\nimport GitHubApi from '@app/services/github-api';\n\nconst EditorService = async (ref: Ref) => {\n  const [{ isLoaded }, setUserInfo] = useState();\n  const fetchFile = async () => {\n    const route = getRoute();\n    const data = await GitHubApi.getInstance().getFile(route);\n\n    setUserInfo({ data, isLoaded: true });\n  }\n  if (!isLoaded) fetchFile();\n};\n\nexport default EditorService;\n", "import { ERROR_NOT_FOUND } from '@app/components/core/constants';\n\nconst publicResponseMiddleware = (res: Response) => res.json();\n\nclass PublicApi {\n  static instance = new PublicApi();\n  private constructor() {}\n  static getInstance() {\n    return this.instance;\n  }\n\n  async request(uri: string) {\n    const res  = await fetch(`${location.protocol}//${location.host}/data${uri}`, {\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n      },\n    })\n    return publicResponseMiddleware(res)\n  }\n\n  async getFile(path: string) {\n    const data = await this.request(`${path}.json`)\n    if (!data) throw Error(ERROR_NOT_FOUND);\n    return data;\n  };\n}\n\nexport default PublicApi;\n", "import { Ref } from '@app/components/core/view';\nimport { useState } from '@app/components/core/view';\nimport { getRoute } from '@app/services/web-utils';\nimport * as log from '@app/services/log';\nimport PublicApi from '@app/services/public-api';\n\nconst PreviewService = async (ref: Ref) => {\n  const [state = {}, setUserInfo] = useState();\n  log.info('PreviewService', { state, setUserInfo });\n  const route = getRoute();\n  const data = await PublicApi.getInstance().getFile(route);\n  log.info(`File ${route} loaded`, { data, state })\n  setUserInfo(data);\n};\n\nexport default PreviewService;\n", "import { Ref } from '@app/components/core/view';\nimport { useState } from '@app/components/core/view';\nimport GitHubApi from '@app/services/github-api';\n\nconst UserInfoService = async (ref: Ref) => {\n  const [{ variables }, setUserInfo] = useState();\n  const fetchUser = async () => {\n    const { avatarUrl, login } = await GitHubApi.getInstance().getUserInfo();\n    setUserInfo({ children: [{ tag: 'img', src: avatarUrl }, { tag: 'span', children: login}], variables: { avatarUrl } });\n  }\n  if (!variables) fetchUser();\n}\n\nexport default UserInfoService;\n", "import OauthService from '@app/services/oauth'\nimport EditorService from '@app/services/editor'\nimport PreviewService from '@app/services/preview'\nimport UserInfoService from '@app/services/user-info'\n\nconst servicesMap:Record<string,Service> = {\n  oauth: OauthService,\n  editor: EditorService,\n  preview: PreviewService,\n  userInfo: UserInfoService,\n};\n\nexport default servicesMap;"],
  "mappings": "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",
  "names": ["GITHUB_CLIENT_ID", "ERROR_NOT_FOUND", "ERROR_REQUEST", "isProd", "debug", "isProd", "args", "info", "isProd", "args", "getAccessToken", "code", "debug", "GITHUB_CLIENT_ID", "accessToken", "scope", "tokenType", "res", "OauthService", "ref", "protocol", "hash", "search", "state", "uri", "oauth_default", "getRoute", "protocol", "hash", "pathname", "roll", "floor", "random", "useState", "initialState", "state", "title", "url", "repo_file_default", "get_user_default", "githubResponseMiddleware", "res", "data", "errors", "GitHubApi", "_GitHubApi", "query", "variables", "accessToken", "tokenType", "path", "repo_file_default", "ERROR_REQUEST", "object", "ERROR_NOT_FOUND", "text", "user", "get_user_default", "github_api_default", "EditorService", "ref", "isLoaded", "setUserInfo", "useState", "route", "getRoute", "data", "github_api_default", "editor_default", "publicResponseMiddleware", "res", "PublicApi", "_PublicApi", "uri", "path", "data", "ERROR_NOT_FOUND", "public_api_default", "PreviewService", "ref", "state", "setUserInfo", "useState", "info", "route", "getRoute", "data", "public_api_default", "preview_default", "UserInfoService", "ref", "variables", "setUserInfo", "useState", "avatarUrl", "login", "github_api_default", "user_info_default", "servicesMap", "oauth_default", "editor_default", "preview_default", "user_info_default", "services_default"]
}
