(()=>{var a="Page not found",n="Wrong request";var p=`query RepoFile($repo_owner: String!, $repo_name: String!, $object_path: String!) {
  repository(owner: $repo_owner, name: $repo_name) {
    object(expression: $object_path) {
      ... on Blob {
        byteSize
        text
      }
    }
  }
}
# {
#   "repo_name": "iegik.github.com",
#   "repo_owner": "iegik",
#   "object_path": "gh-pages: data/home.json"
# }`;var c=`query GetUser($login:String!) {
  user(login: $login) {
    avatarUrl
    login
  }
}
`;var u=async g=>{let{data:e,errors:t}=await g.json();if(t)throw t[0];return e},i=class{constructor(){this.repoName="iegik.github.com";this.repoOwner="iegik";this.storeRoot="gh-pages:data"}static getInstance(){return this.instance}async request({query:e,variables:t}){if(typeof window=="undefined")return;let o=window.sessionStorage?.getItem("access_token"),r=window.sessionStorage?.getItem("token_type"),h=await fetch("https://api.github.com/graphql",{method:"POST",headers:{"Content-Type":"application/json",Accept:"application/json",Authorization:`${r} ${o}`},body:JSON.stringify({query:e,variables:t})});return u(h)}async getFile(e){let t=await this.request({query:p,variables:{repo_name:this.repoName,repo_owner:this.repoOwner,object_path:`${this.storeRoot}${e}.json`}});if(!t)throw Error(n);let{repository:{object:o}}=t;if(!o)throw Error(a);let{text:r}=o;return JSON.parse(r)}async getUserInfo(){let{user:e}=await this.request({query:c,variables:{login:this.repoOwner}});if(!e)throw Error(n);return e}},s=i;s.instance=new i;var b=s;})();
//# sourceMappingURL=github-api.min.js.map
