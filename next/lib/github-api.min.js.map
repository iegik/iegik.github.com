{
  "version": 3,
  "sources": ["../../../src/components/core/constants.ts", "../../../src/graphql/github/repo_file.graphql", "../../../src/graphql/github/get_user.graphql", "../../../src/services/github-api.ts"],
  "sourcesContent": ["export const GITHUB_CLIENT_ID = 'ae0dcffd947e0ca15a12';\nexport const SCOPE = 'user repo';\nexport const ERROR_ACCESS_TOKEN = 'Access token not provided';\nexport const ERROR_NOT_FOUND = 'Page not found';\nexport const ERROR_REQUEST = 'Wrong request';\n", "query RepoFile($repo_owner: String!, $repo_name: String!, $object_path: String!) {\n  repository(owner: $repo_owner, name: $repo_name) {\n    object(expression: $object_path) {\n      ... on Blob {\n        byteSize\n        text\n      }\n    }\n  }\n}\n# {\n#   \"repo_name\": \"iegik.github.com\",\n#   \"repo_owner\": \"iegik\",\n#   \"object_path\": \"gh-pages: data/home.json\"\n# }", "query GetUser($login:String!) {\n  user(login: $login) {\n    avatarUrl\n    login\n  }\n}\n", "import { ERROR_NOT_FOUND, ERROR_REQUEST } from '@app/components/core/constants';\nimport repoFile from '@app/graphql/github/repo_file.graphql';\nimport getUserQuery from '@app/graphql/github/get_user.graphql';\n\nconst githubResponseMiddleware = async (res: Response) => {\n  const { data, errors } = await res.json();\n  if (errors) throw errors[0];\n  return data;\n}\n\nclass GitHubApi {\n  static instance = new GitHubApi();\n  repoName: string = 'iegik.github.com';\n  repoOwner: string = 'iegik';\n  storeRoot: string = 'gh-pages:data';\n  private constructor() {}\n  static getInstance() {\n    return this.instance;\n  }\n\n  async request({ query, variables }: Record<string, any>) {\n    if (typeof window === 'undefined') return;\n    const accessToken = window.sessionStorage?.getItem('access_token');\n    const tokenType = window.sessionStorage?.getItem('token_type');\n\n    const res = await fetch('https://api.github.com/graphql', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n        Authorization: `${tokenType} ${accessToken}`,\n      },\n      body: JSON.stringify({\n        query,\n        variables,\n      }),\n    })\n    return githubResponseMiddleware(res)\n  }\n\n  async getFile(path: string) {\n    const data = await this.request({ query: repoFile, variables: {\n      repo_name: this.repoName,\n      repo_owner: this.repoOwner,\n      object_path: `${this.storeRoot}${path}.json`,\n    }})\n    if (!data) throw Error(ERROR_REQUEST);\n    const {\n      repository: { object },\n    } = data;\n    if (!object) throw Error(ERROR_NOT_FOUND);\n    const { text } = object;\n    return JSON.parse(text);\n  };\n\n  async getUserInfo() {\n    const { user } = await this.request({ query: getUserQuery, variables: { login: this.repoOwner }})\n    if (!user) throw Error(ERROR_REQUEST);\n    return user;\n  }\n}\n\nexport default GitHubApi;\n"],
  "mappings": "mBAGO,IAAMA,EAAkB,iBAClBC,EAAgB,gBCJ7B,IAAAC,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;KCAA,IAAAC,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;ECIA,IAAMC,EAA2B,MAAOC,GAAkB,CACxD,GAAM,CAAE,KAAAC,EAAM,OAAAC,CAAO,EAAI,MAAMF,EAAI,KAAK,EACxC,GAAIE,EAAQ,MAAMA,EAAO,CAAC,EAC1B,OAAOD,CACT,EAEME,EAAN,MAAMC,CAAU,CAKN,aAAc,CAHtB,cAAmB,mBACnB,eAAoB,QACpB,eAAoB,eACG,CAJvB,YAAO,SAAW,IAAIA,EAKtB,OAAO,aAAc,CACnB,OAAO,KAAK,QACd,CAEA,MAAM,QAAQ,CAAE,MAAAC,EAAO,UAAAC,CAAU,EAAwB,CACvD,GAAI,OAAO,OAAW,IAAa,OACnC,IAAMC,EAAc,OAAO,gBAAgB,QAAQ,cAAc,EAC3DC,EAAY,OAAO,gBAAgB,QAAQ,YAAY,EAEvDR,EAAM,MAAM,MAAM,iCAAkC,CACxD,OAAQ,OACR,QAAS,CACP,eAAgB,mBAChB,OAAQ,mBACR,cAAe,GAAGQ,CAAS,IAAID,CAAW,EAC5C,EACA,KAAM,KAAK,UAAU,CACnB,MAAAF,EACA,UAAAC,CACF,CAAC,CACH,CAAC,EACD,OAAOP,EAAyBC,CAAG,CACrC,CAEA,MAAM,QAAQS,EAAc,CAC1B,IAAMR,EAAO,MAAM,KAAK,QAAQ,CAAE,MAAOS,EAAU,UAAW,CAC5D,UAAW,KAAK,SAChB,WAAY,KAAK,UACjB,YAAa,GAAG,KAAK,SAAS,GAAGD,CAAI,OACvC,CAAC,CAAC,EACF,GAAI,CAACR,EAAM,MAAM,MAAMU,CAAa,EACpC,GAAM,CACJ,WAAY,CAAE,OAAAC,CAAO,CACvB,EAAIX,EACJ,GAAI,CAACW,EAAQ,MAAM,MAAMC,CAAe,EACxC,GAAM,CAAE,KAAAC,CAAK,EAAIF,EACjB,OAAO,KAAK,MAAME,CAAI,CACxB,CAEA,MAAM,aAAc,CAClB,GAAM,CAAE,KAAAC,CAAK,EAAI,MAAM,KAAK,QAAQ,CAAE,MAAOC,EAAc,UAAW,CAAE,MAAO,KAAK,SAAU,CAAC,CAAC,EAChG,GAAI,CAACD,EAAM,MAAM,MAAMJ,CAAa,EACpC,OAAOI,CACT,CACF,EAEOE,EAAQd",
  "names": ["ERROR_NOT_FOUND", "ERROR_REQUEST", "repo_file_default", "get_user_default", "githubResponseMiddleware", "res", "data", "errors", "GitHubApi", "_GitHubApi", "query", "variables", "accessToken", "tokenType", "path", "repo_file_default", "ERROR_REQUEST", "object", "ERROR_NOT_FOUND", "text", "user", "get_user_default", "github_api_default"]
}
